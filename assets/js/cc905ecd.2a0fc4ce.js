"use strict";(self.webpackChunkdummy_code_documentation=self.webpackChunkdummy_code_documentation||[]).push([[3761],{3905:(e,a,n)=>{n.d(a,{Zo:()=>u,kt:()=>y});var t=n(7294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function i(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?i(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=t.createContext({}),c=function(e){var a=t.useContext(l),n=a;return e&&(n="function"==typeof e?e(a):o(o({},a),e)),n},u=function(e){var a=c(e.components);return t.createElement(l.Provider,{value:a},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},p=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),p=r,y=d["".concat(l,".").concat(p)]||d[p]||m[p]||i;return n?t.createElement(y,o(o({ref:a},u),{},{components:n})):t.createElement(y,o({ref:a},u))}));function y(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=p;var s={};for(var l in a)hasOwnProperty.call(a,l)&&(s[l]=a[l]);s.originalType=e,s[d]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}p.displayName="MDXCreateElement"},103:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var t=n(7462),r=(n(7294),n(3905));const i={sidebar_position:3},o="Lista",s={unversionedId:"Lista",id:"Lista",title:"Lista",description:"Se utiliza para almacenar una colecci\xf3n ordenada de elementos. Estos elementos pueden ser de cualquier tipo de dato, como n\xfameros, texto, objetos u otros arrays. Las listas son una estructura de datos fundamental en la mayor\xeda de los lenguajes de programaci\xf3n y proporcionan una forma eficiente de organizar y acceder a datos.",source:"@site/datatypes/Lista.mdx",sourceDirName:".",slug:"/Lista",permalink:"/datatypes/Lista",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Texto",permalink:"/datatypes/Texto"},next:{title:"Numero",permalink:"/datatypes/Numero"}},l={},c=[{value:"Colecci\xf3n Ordenada:",id:"colecci\xf3n-ordenada",level:2},{value:"\xcdndices:",id:"\xedndices",level:2},{value:"Tipos de Elementos:",id:"tipos-de-elementos",level:2},{value:"Longitud Variable:",id:"longitud-variable",level:2},{value:"Operaciones Comunes:",id:"operaciones-comunes",level:2},{value:"Iteraci\xf3n:",id:"iteraci\xf3n",level:2},{value:"Matrices Multidimensionales:",id:"matrices-multidimensionales",level:2},{value:"Sintaxis:",id:"sintaxis",level:2},{value:"Ejemplo\ud83d\udcdd",id:"ejemplo",level:2}],u={toc:c},d="wrapper";function m(e){let{components:a,...n}=e;return(0,r.kt)(d,(0,t.Z)({},u,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"lista"},"Lista"),(0,r.kt)("p",null,"Se utiliza para almacenar una colecci\xf3n ordenada de elementos. Estos elementos pueden ser de cualquier tipo de dato, como n\xfameros, texto, objetos u otros arrays. Las listas son una estructura de datos fundamental en la mayor\xeda de los lenguajes de programaci\xf3n y proporcionan una forma eficiente de organizar y acceder a datos."),(0,r.kt)("p",null,'Aqu\xed hay algunas caracter\xedsticas clave del tipo de dato "Lista":'),(0,r.kt)("h2",{id:"colecci\xf3n-ordenada"},"Colecci\xf3n Ordenada:"),(0,r.kt)("p",null,"Los elementos en una lista se almacenan en un orden espec\xedfico, lo que significa que cada elemento tiene una posici\xf3n \xfanica dentro de la lista."),(0,r.kt)("h2",{id:"\xedndices"},"\xcdndices:"),(0,r.kt)("p",null,"Cada elemento de la lista se puede acceder mediante un \xedndice. Los \xedndices suelen comenzar en 0 para el primer elemento, 1 para el segundo y as\xed sucesivamente."),(0,r.kt)("h2",{id:"tipos-de-elementos"},"Tipos de Elementos:"),(0,r.kt)("p",null,"Una lista puede contener elementos de diferentes tipos de datos, incluyendo n\xfameros, texto, objetos, u otros arrays."),(0,r.kt)("h2",{id:"longitud-variable"},"Longitud Variable:"),(0,r.kt)("p",null,"Las listas pueden cambiar de tama\xf1o din\xe1micamente. Puedes agregar o eliminar elementos seg\xfan sea necesario."),(0,r.kt)("h2",{id:"operaciones-comunes"},"Operaciones Comunes:"),(0,r.kt)("p",null,"Las listas proporcionan una serie de operaciones comunes, como agregar elementos al final (agregar), eliminar elementos (sacar, empalme), buscar elementos (obtenerIndice, incluye), recorrer elementos (para, paraCada) y muchas m\xe1s."),(0,r.kt)("h2",{id:"iteraci\xf3n"},"Iteraci\xf3n:"),(0,r.kt)("p",null,"Es com\xfan usar bucles para recorrer los elementos de una lista y realizar operaciones en cada uno de ellos."),(0,r.kt)("h2",{id:"matrices-multidimensionales"},"Matrices Multidimensionales:"),(0,r.kt)("p",null,"Las listas pueden contener otras listas, lo que permite crear matrices multidimensionales para organizar datos m\xe1s complejos."),(0,r.kt)("h2",{id:"sintaxis"},"Sintaxis:"),(0,r.kt)("p",null,"La sintaxis para declarar una lista var\xeda seg\xfan el lenguaje de programaci\xf3n, pero com\xfanmente se usan corchetes [] para definir una lista y comas , para separar los elementos."),(0,r.kt)("h2",{id:"ejemplo"},"Ejemplo\ud83d\udcdd"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dummy"},'var lista1 = [1, 2, 3, 4, 5];\nvar lista2 = ["Manzana", "Banana", "Cereza"];\n\nfuncion ejemploLista() {\n  var suma = 0;\n  \n  para (var i = 0; i < lista1.longitud; i++) {\n    suma = suma + lista1[i];\n  }\n  \n  imprimir("La suma de los n\xfameros en la lista es: " + suma);\n  \n  si (lista2.longitud > 0) {\n    imprimir("La lista 2 tiene elementos.");\n  } sino {\n    imprimir("La lista 2 est\xe1 vac\xeda.");\n  }\n')),(0,r.kt)("p",null,"Salida:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dummy"},"// La suma de los n\xfameros en la lista es: 15\n// La lista 2 tiene elementos.\n")))}m.isMDXComponent=!0}}]);